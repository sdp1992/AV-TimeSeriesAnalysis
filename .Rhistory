train$Category_3<-as.factor(train$Category_3)
summary(train)
levels(train$Category_1)
summary(train)
dim(train)
test$Category_1<-as.factor(test$Category_1)
test$Category_2<-as.factor(test$Category_2)
test$Category_3<-as.factor(test$Category_3)
summary(test)#Some missing value in Category_2
unique(test$Item_ID)
summary(test)#Some missing value in Category_2
summary(train)#Some missing value in Category_2
min(train$Datetime)
View(arrange(train,Category_3,Category_2,Category_3))
View(arrange(train,Category_3,Category_2,Category_1))
str(train)
library(lubridate)
install.packages("lubridate")
library(lubridate)
summary(train)
train$Datetime<-ymd(train$Datetime)
summary(train)
str(train)
test$Datetime<-ymd(test$Datetime)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
attach(train)
table(Category_3,Category_2)
table(Category_3,Category_1)
str(table(Category_3,Category_1))
temp<-as.data.frame(table(Category_3,Category_1))
str(temp)
summary(temp)
table(Category_3,Category_1,Category_2)
summary(train)
table(Category_2,Category_1)
summary(train)
table(Category_2,Category_3)
table(Category_2,Category_1)
missing_cat_index<-which(is.na(train))
missing_cat_index<-which(is.na(train$Category_2))
missing_cat_index
summary(train)
item_id_missing_cat_index<-unique(train$Item_ID[missing_cat_index])
item_id_missing_cat_index
View(train[,train$Item_ID in item_id_missing_cat_index])
View(train[,which(train$Item_ID in item_id_missing_cat_index]))
which(train$Item_ID in item_id_missing_cat_index])
train$Item_ID in item_id_missing_cat_index]
train$Item_ID %in% item_id_missing_cat_index]
train$Item_ID %in% item_id_missing_cat_index
View(train$Item_ID[train$Item_ID %in% item_id_missing_cat_index,])
View(train[train$Item_ID %in% item_id_missing_cat_index,])
summary(train[train$Item_ID %in% item_id_missing_cat_index,])
plot(Category_3,Category_1)
boxplot(Category_2,Price)
summary(train)
boxplot(Category_2,Price)
boxplot(Category_1,Price)
boxplot(Category_3,Price)
View(train)
temp
temp<-which(is.na(train$Category_2))
View(train[temp,])
summary(train[train$Item_ID==30653,])
unique(train$Item_ID)
unique(train$Category_1)
table(Category_3,Category_2)
table(Category_1,Category_2)
table(Category_1,train$Category_1[Category_1==3])
table(Category_1,train$Category_1[train$Category_1==3])
train[,which(train$Category_1==3)]
train[,which(train[Category_1,]==3)]
train[which(train[Category_1,]==3),]
train[which(train[Category_1==3,),]
train[which(train[Category_1==3),]
train[which(train[Category_1==3]),]
train[which(train$Category_1[Category_1==3]),]
rm(list=ls())
library(dplyr)
library(lubridate)
train<-read.csv("F:\\AnalyticsVidya\\FA_TimeSeriesAnalysis\\data\\train.csv",header = TRUE)
test<-read.csv("F:\\AnalyticsVidya\\FA_TimeSeriesAnalysis\\data\\test.csv",header = TRUE)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
dim(train)#881876 observations
dim(test)#266248 values has to be predicted
train<-train[,-1]
test<-test[,-6]
train$Category_1<-as.factor(train$Category_1)
train$Category_2<-as.factor(train$Category_2)
train$Category_3<-as.factor(train$Category_3)
train$Datetime<-ymd(train$Datetime)
test$Category_1<-as.factor(test$Category_1)
test$Category_2<-as.factor(test$Category_2)
test$Category_3<-as.factor(test$Category_3)
test$Datetime<-ymd(test$Datetime)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
unique(train$Datetime)
unique(train$Item_ID)
912*1529
plot(Category_2,Price)
table(Category_2)
table(Category_3)
table(Category_3,Category_2)
table(Category_1,Category_2)
table(Category_1,Category_3)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
plot(Category_2,Number_Of_Sales)
plot(Category_1,Number_Of_Sales)
plot(Number_Of_Sales,Category_1)
plot(Number_Of_Sales,Category_2)
library(ggplot2)
ggplot(train,aes(Category_3,Price))+facet_wrap(Category_2)
ggplot(train,aes(Category_3,Price))+geom_point()+facet_wrap(~Category_2)
View(train)
plot(Category_2,Number_Of_Sales)
plot(Category_3,Number_Of_Sales)
ggplot(train,aes(Category_3,Number_Of_Sales))+geom_point()+facet_wrap(~Category_2)
ggplot(train,aes(Category_2,Number_Of_Sales))+geom_point()+facet_wrap(~Category_3)
library(dplyr)
library(lubridate)
library(ggplot2)
train<-read.csv("F:\\AnalyticsVidya\\FA_TimeSeriesAnalysis\\data\\train.csv",header = TRUE)
test<-read.csv("F:\\AnalyticsVidya\\FA_TimeSeriesAnalysis\\data\\test.csv",header = TRUE)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
dim(train)#881876 observations
dim(test)#266248 values has to be predicted
train<-train[,-1]
test<-test[,-6]
train$Category_1<-as.factor(train$Category_1)
train$Category_2<-as.factor(train$Category_2)
train$Category_3<-as.factor(train$Category_3)
train$Datetime<-ymd(train$Datetime)
test$Category_1<-as.factor(test$Category_1)
test$Category_2<-as.factor(test$Category_2)
test$Category_3<-as.factor(test$Category_3)
test$Datetime<-ymd(test$Datetime)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
missing_cat_index<-which(is.na(train$Category_2))
item_id_missing_cat_index<-unique(train$Item_ID[missing_cat_index])
levels(train$Category_2)<-c(levels(train$Category_2),6)
train$Category_2[missing_cat_index]<- 6
View(train)
temp1<-which(train$Item_ID==29655)
library(xts)
ts29655<-xts(train[temp1,"Item_ID"],order.by=as.Date(train$Datetime, "%Y/%m/%d"))
plot(train$Number_Of_Sales[temp1])
plot.ts(train$Number_Of_Sales[temp1])
ts29655<-ts(train[temp1,"Price"],start = c(2014,11,12),frequency = 1)
ts.plot(ts29655)
summary(ts29655)
heat(ts29655)
head(ts29655)
ts29655<-ts(train[temp1,c("Datetime","Price")],start = c(2014,11,12),frequency = 1)
ts.plot(ts29655)
head(ts29655)
rm(list=ls())
library(dplyr)
library(lubridate)
library(ggplot2)
library(xts)
train<-read.csv("F:\\AnalyticsVidya\\FA_TimeSeriesAnalysis\\data\\train.csv",header = TRUE)
test<-read.csv("F:\\AnalyticsVidya\\FA_TimeSeriesAnalysis\\data\\test.csv",header = TRUE)
summary(train)#Some missing value in Category_2
summary(test)#Some missing value in Category_2
dim(train)#881876 observations
dim(test)#266248 values has to be predicted
train<-train[,-1]
test<-test[,-6]
train$Category_1<-as.factor(train$Category_1)
train$Category_2<-as.factor(train$Category_2)
train$Category_3<-as.factor(train$Category_3)
train$Datetime<-ymd(train$Datetime)
test$Category_1<-as.factor(test$Category_1)
test$Category_2<-as.factor(test$Category_2)
test$Category_3<-as.factor(test$Category_3)
test$Datetime<-ymd(test$Datetime)
missing_cat_index<-which(is.na(train$Category_2))
item_id_missing_cat_index<-unique(train$Item_ID[missing_cat_index])
levels(train$Category_2)<-c(levels(train$Category_2),6)
train$Category_2[missing_cat_index]<- 6
temp1<-which(train$Item_ID==29655)
ts29655<-ts(train[temp1,c("Datetime","Price")],start = c(2014,11,12),frequency = 1)
head(ts29655)
head(train)
ts29655<-as.xts(train[temp1,c("Datetime","Price")])
temp_data<-train[temp1,c("Datetime","Price")]
ts29655<-xts(temp_data,order.by = as.Date(temp_data$Datetime, "%Y/%m/%d"))
head(ts29655)
plot(ts29655)
plot.ts(ts29655)
?as.Date
test$Datetime<-as.Date(test$Datetime)
train$Datetime<-as.Date(train$Datetime)
summary(train)
str(train)
missing_cat_index<-which(is.na(train$Category_2))
item_id_missing_cat_index<-unique(train$Item_ID[missing_cat_index])
levels(train$Category_2)<-c(levels(train$Category_2),6)
train$Category_2[missing_cat_index]<- 6
temp1<-which(train$Item_ID==29655)
temp_data<-train[temp1,c("Datetime","Price")]
ts.plot(temp_data)
head(temp_data)
str(temp_data)
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 1)
plot(ts)
plot(timeseries)
temp_data<-train[temp1,"Price"]
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 1,)
plot(timeseries)
temp_data
timeseries
temp1<-which(train$Item_ID==29655)
temp_data<-train[temp1,"Price"]
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 1,)
plot(timeseries)
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 365,)
plot(timeseries)
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 30)
plot(timeseries)
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 7)
plot(timeseries)
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 1)
plot(timeseries)
timeseries<-ts(temp_data,start = c(2014,11,12),frequency = 30)
plot(timeseries)
getwd()
libraries<-c("lubridate","xts","forecast")
sapply(libraries,require,character.only=TRUE)
train<-read.csv("F:\\AnalyticsVidya\\TimeSeriesAnalysis\\train.csv")
test<-read.csv("F:\\AnalyticsVidya\\TimeSeriesAnalysis\\test.csv")
dim(train)
dim(test)
train$Datetime<-dmy_hm(train$Datetime)
test$Datetime<-dmy_hm(test$Datetime)
plot.ts(train)
plot.ts(train[100,3])
plot(train[200,3])
plot(train[200,3],type = "l")
plot(train[200,1],train[200,3],type = "l")
summary(train)
plot(train[200,1],train[200,3],type = "p")
plot(train[50,1],train[50,3],type = "l")
ggplot(train[100,c(1,3),aes(x=ID,y=Count)])+geom_line()
library(ggplot2)
ggplot(train[100,c(1,3),aes(x=ID,y=Count)])+geom_line()
ggplot(train[100,c(1,3)],aes(x=ID,y=Count)])+geom_line()
ggplot(train[100,c(1,3)],aes(x=ID,y=Count))+geom_line()
summary(train)
str9train
str(train)
ggplot(train[100,c(1,3)],aes(x=ID,y=Count))+geom_bar()
ggplot(train[100,c(1,3)],aes(x=ID,y=Count))+geom_area()
plot(train)
plot(train[,3])
plot(train[100,3])
plot(train[1000,3])
plot(train[100000,3])
plot(train[50000,3])
plot(train[5000,3])
plot(train[,3])
temp<-train[1000,3]
plot(temp)
summary(train)
summary(temp)
str(temp)
summary(train)
length(train)
dim(train)
plot(train$Count)
plot(train$Count[100])
plot(x=train$Count[100])
barplot(x=train$Count[100])
barplot(y=train$Count[100])
plot(y=train$Count[100])
train_ts<-ts(train[,3],frequency=12)
plot(train_ts)
plot(train_ts[100,])
plot(train_ts[:100])
plot(train_ts[1:100])
plot(train_ts[1:1000])
ts.plot(train_ts)
summary(train_ts)
train_ts
head(train_ts)
ggplot(train, aes(ID, Count)) + geom_line()
ggplot(train[100,], aes(ID, Count)) + geom_line()
ggplot(train[100,], aes(ID, Count)) + geom_line()
install.packages(plotly)
install.packages("plotly")
library(plotly)
now_lt <- as.POSIXlt(Sys.time(), tz = "GMT")
tm <- seq(0, 600, by = 10)
x <- now_lt - tm
y <- rnorm(length(x))
p <- plot_ly(x = ~x, y = ~y, mode = 'lines', text = paste(tm, "seconds from now in GMT"))
p
ts.plot(train_ts)
log_train_ts<-log(train_ts)
plot(log_train_ts)
ndiffs(log_train_ts, alpha=0.05, test=c("kpss","adf", "pp"), max.d=2)
nsdiffs(log_train_ts, m=frequency(log_train_ts), test=c("ocsb","ch"), max.D=1)
train_ts<-ts(train[,3],frequency=24)
ts.plot(train_ts)
log_train_ts<-log(train_ts)
plot(log_train_ts)
ndiffs(log_train_ts, alpha=0.05, test=c("kpss","adf", "pp"), max.d=2)
nsdiffs(log_train_ts, m=frequency(log_train_ts), test=c("ocsb","ch"), max.D=1)
train_ts<-ts(train[,3],frequency=24*7)
ts.plot(train_ts)
log_train_ts<-log(train_ts)
plot(log_train_ts)
ndiffs(log_train_ts, alpha=0.05, test=c("kpss","adf", "pp"), max.d=2)
nsdiffs(log_train_ts, m=frequency(log_train_ts), test=c("ocsb","ch"), max.D=1)
install.packages("HoltWintesr")
install.packages("HoltWinters")
install.packages("installr")
library(installr)
updateR()
libraries<-c("lubridate","xts","forecast")
sapply(libraries,require,character.only=TRUE)
train<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/train.csv")
test<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/test.csv")
install.packages("lubridate")
install.packages("forecast")
libraries<-c("lubridate","forecast")
sapply(libraries,require,character.only=TRUE)
train<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/train.csv")
test<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/test.csv")
summary(train)
str(train)
train$Datetime<-dmy_hm(train$Datetime)
test$Datetime<-dmy_hm(test$Datetime)
summary(train)
str(train)
train$Datetime<-dmy_hm(train$Datetime)
test$Datetime<-dmy_hm(test$Datetime)
summary(train)
str(train)
train<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/train.csv")
test<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/test.csv")
summary(train)
str(train)
train$Datetime<-dmy_hm(train$Datetime)
test$Datetime<-dmy_hm(test$Datetime)
summary(train)
str(train)
dim(train)
dim(test)
train_ts<-ts(train[100,3],frequency=12)
train_ts
train_ts<-ts(train[100,3],frequency=1)
plot(train_ts)
train_ts
train_ts<-ts(train[100,3],frequency=12,start=1,end=18288)
plot(train_ts)
train_ts
train_ts<-ts(train[1:100,3],frequency=12,start=1,end=18288)
train_ts
plot(train_ts)
ts.plot(train_ts)
train_ts<-ts(train[1:96,3],frequency=12,start=1,end=96)
ts.plot(train_ts)
train_ts<-ts(train[1:24,3],frequency=12,start=1,end=24)
ts.plot(train_ts)
train_ts<-ts(train[1:24,3],frequency=12,start=1,end=24)
ts.plot(train_ts)
dim(train_ts)
length(train_ts)
train[1:24,]
train_ts<-ts(train[1:48,3],frequency=12)
ts.plot(train_ts)
train[1:48,]
train_ts<-ts(train[1:168,3],frequency=12)
ts.plot(train_ts)
train_ts<-ts(train[1:168,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[1:336,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[1:336,3],frequency=12)
ts.plot(train_ts)
train_ts<-ts(train[1:168,3],frequency=12)
ts.plot(train_ts)
train_ts<-ts(train[1:168,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[1:168,3],frequency=24*7*30)
ts.plot(train_ts)
train_ts<-ts(train[1:1680,3],frequency=24*7*30)
ts.plot(train_ts)
train_ts<-ts(train[1:5040,3],frequency=24*7*30)
ts.plot(train_ts)
train_ts<-ts(train[1:5040,3],frequency=24*7)
ts.plot(train_ts)
train_ts<-ts(train[1:500,3],frequency=24*7)
ts.plot(train_ts)
train_ts<-ts(train[1:240,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[1:240,3],frequency=24)
train_ts<-ts(train[1:240,3],frequency=12)
ts.plot(train_ts)
train_ts<-ts(train[1:336,3],frequency=24*7)
ts.plot(train_ts)
train_ts<-ts(train[20000:20335,3],frequency=24*7)
ts.plot(train_ts)
train_ts<-ts(train[10000:10335,3],frequency=24*7)
ts.plot(train_ts)
train_ts<-ts(train[10000:10335,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[10000:10335,3],frequency=12)
ts.plot(train_ts)
train_ts<-ts(train[10000:10335,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[10000:10335,3],frequency=24)
ts.plot(train_ts)
train_ts<-ts(train[10000:10167,3],frequency=24)
ts.plot(train_ts)
temp_ts<-ts(train[10000:10167,3],frequency=24)
ts.plot(temp_ts)
ts.plot(train[,3])
log_train_ts<-log(train_ts)
plot(log_train_ts)
log_train_ts<-log(train[,3])
plot(log_train_ts)
log_train_ts<-log(train[,3])
ts.plot(log_train_ts)
timeseries<-ts(train[,3],frequency=24)
str(timeseries)
log_timeseries<-log(timeseries)
log_timeseries<-log(timeseries)
ts.plot(log_timeseries)
diff_ts<-diff(log_train_ts,24)
plot(diff1)
plot(diff)
length(diff_ts)
plot(diff_ts)
ts.plot(diff_ts)
diff_ts<-diff(log_train_ts,12)
ts.plot(diff_ts)
acf2(diff1)
acf2(diff_ts)
acf(diff_ts)
pacf(diff_ts)
acf(diff_ts)
pacf(diff_ts)
diff_ts<-diff(log_train_ts,24)
ts.plot(diff_ts)
acf(diff_ts)
pacf(diff_ts)
diff_ts<-diff(log_train_ts,12)
ts.plot(diff_ts)
acf(diff_ts)
pacf(diff_ts)
adf.test(diff1)
adf.test(diff_ts)
library(tseries)
adf.test(diff_ts)
acf(diff_ts,lag.max = 100)
pacf(diff_ts,lag.max = 100)
adf.test(diff_ts,k = 12)
adf.test(diff_ts,k = 24)
diff_ts<-diff(log_train_ts,12)
ts.plot(diff_ts)
acf(diff_ts,lag.max = 100)
pacf(diff_ts,lag.max = 100)
adf.test(diff_ts,k = 12)
acf(diff_ts,lag.max = 100)
pacf(diff_ts,lag.max = 100)
adf.test(diff_ts,k = 12)
fit <- auto.arima(train_ts, lambda=0)
fit <- auto.arima(timeseries, lambda=0)
summary(fit)
Acf(residuals(fit))
test<-Box.test(residuals(fit), lag=36, fitdf=12, type="Ljung")
test
qqline(residuals(fit))
qqnorm(residuals(fit))
qqline(residuals(fit))
timeseries1_forcast<-forecast(fit, h=5112)
output<-data.frame(ID=test$ID,Count=timeseries1_forcast$mean)
dim(test)
length(test)
test<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/test.csv")
length(test)
dim(test)
output<-data.frame(ID=test$ID,Count=timeseries1_forcast$mean)
write.csv(output,"F:/AnalyticsVidya/TimeSeriesAnalysis/output.csv",row.names=FALSE)
str(timeseries1_forcast)
output<-data.frame(ID=test$ID,Count=timeseries1_forcast$mean)
write.csv(output,"F:/AnalyticsVidya/TimeSeriesAnalysis/output.csv",row.names=FALSE)
summary(fit)
Acf(residuals(fit))
qqnorm(residuals(fit))
qqline(residuals(fit))
fit <- auto.arima(timeseries, lambda=0,d=0,D=1)
summary(fit)
qqnorm(residuals(fit))
qqline(residuals(fit))
test<-Box.test(residuals(fit), lag=240, fitdf=24, type="Ljung")
test
timeseries1_forcast<-forecast(fit, h=5112)
output<-data.frame(ID=test$ID,Count=timeseries1_forcast$mean)
write.csv(output,"F:/AnalyticsVidya/TimeSeriesAnalysis/output.csv",row.names=FALSE)
test<-read.csv("F:/AnalyticsVidya/TimeSeriesAnalysis/test.csv")
output<-data.frame(ID=test$ID,Count=timeseries1_forcast$mean)
write.csv(output,"F:/AnalyticsVidya/TimeSeriesAnalysis/output.csv",row.names=FALSE)
summary(fit)
